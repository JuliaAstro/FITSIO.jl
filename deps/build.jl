using BinaryProvider

# This is where all binaries will get installed
const prefix = Prefix(!isempty(ARGS) ? ARGS[1] : joinpath(@__DIR__,"usr"))

libcfitsio = LibraryProduct(prefix, String["libcfitsio"])

products = [
libcfitsio
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Keno/CFITSIOBuilder/releases/download/v3.420"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/cfitsio.aarch64-linux-gnu.tar.gz", "1b08570593ac96e3b96e678744d389d400fafb83edb697ef9a8637a049af4ef9"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/cfitsio.arm-linux-gnueabihf.tar.gz", "e5e60c0608d133879940cf9e593d94fcbe57f4dd09bc9b4cc0f1c4872e39810e"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/cfitsio.i686-linux-gnu.tar.gz", "104c74488bb424661f9df2a66755544d973a58d21d76c416ad9ecc290499b97d"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/cfitsio.i686-w64-mingw32.tar.gz", "af8ab35ac665b1654e50e954e742d8d41c42b18aff289ecb83055409382e5d2e"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/cfitsio.powerpc64le-linux-gnu.tar.gz", "6966d2617a3f7433bcc0e521c4ddc9aa2818ce0f399bb6e14e987e3828da5bfc"),
    BinaryProvider.MacOS() => ("$bin_prefix/cfitsio.x86_64-apple-darwin14.tar.gz", "c86908a66bae4cdd513a6f570310c252f2d48c4d60a99c9d780101824c3611bc"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/cfitsio.x86_64-linux-gnu.tar.gz", "35a64c9807f5d11d8e0893cd78099091021a1d4169368b81d6598addde39f088"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/cfitsio.x86_64-w64-mingw32.tar.gz", "ae6f3651b4084b2cf384c721bc2d6f947b7259206b70c63652e234923e964cd5"),
)
if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end

    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here: (there will be a "libfoo" variable and a "fooifier"
    # variable, etc...)
    @write_deps_file libcfitsio
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end
